//
//  EmotionTrashService.swift
//  HWIBAL
//
//  Created by t2023-m0076 on 2023/10/19.
//

import CoreData
import Foundation
import UIKit

class EmotionTrashService {
    static let shared = EmotionTrashService()
    let coreDataManager = CoreDataManager.shared
    let context = CoreDataManager.shared.persistentContainer.viewContext
    
    // ‚ö†Ô∏è audioRecording Ï†ÄÏû•ÌòïÌÉúÏóê Îî∞Îùº ÏùºÎ∂Ä Î≥ÄÍ≤ΩÎê† Ïàò ÏûàÏùå
    func createEmotionTrash(_ user: User, _ text: String, _ image: UIImage? = nil, _ recordingFilePath: String? = nil) {
        if let entity = NSEntityDescription.entity(forEntityName: "EmotionTrash", in: context),
           let reportEntity = NSEntityDescription.entity(forEntityName: "Report", in: context) {
            let newEmotionTrash = EmotionTrash(entity: entity, insertInto: context)
            newEmotionTrash.id = UUID()
            newEmotionTrash.text = text
            newEmotionTrash.timestamp = Date()
            
            if let image = image {
                newEmotionTrash.image = image.pngData()
            }
            
            if let recordingFilePath = recordingFilePath {
                newEmotionTrash.recording?.filePath = recordingFilePath
            }
            
            newEmotionTrash.user = user
            
            let newReport = Report(entity: reportEntity, insertInto: context)
            newReport.id = UUID()
            newReport.text = text
            newReport.timestamp = Date()
            newReport.user = user
    
            coreDataManager.saveContext()
        }
    }
    
    func updateEmotionTrash(_ user: User, _ id: UUID, _ text: String, _ image: UIImage? = nil, _ recordingFilePath: String? = nil) {
        let fetchRequest: NSFetchRequest<EmotionTrash> = EmotionTrash.fetchRequest()
        fetchRequest.predicate = NSPredicate(format: "id == %@ AND user == %@ ", id as CVarArg, user)
        
        do {
            if let emotionTrashToUpdate = try context.fetch(fetchRequest).first {
                emotionTrashToUpdate.text = text
                emotionTrashToUpdate.timestamp = Date()
                
                if let image = image {
                    emotionTrashToUpdate.image = image.pngData()
                }
                
                if let recordingFilePath = recordingFilePath {
                    emotionTrashToUpdate.recording?.filePath = recordingFilePath
                }
                coreDataManager.saveContext()
            }
        } catch {
            print("Error updating emotionTrash: \(error)")
        }
    }
    
    // delete: Ïú†Ï†ÄÏùò Í∞êÏ†ïÏì∞Î†àÍ∏∞ Í∞úÎ≥Ñ ÏÇ≠Ï†ú
    func deleteEmotionTrash(_ user: User, _ id: UUID) {
        let fetchRequest: NSFetchRequest<EmotionTrash> = EmotionTrash.fetchRequest()
        fetchRequest.predicate = NSPredicate(format: "id == %@ AND user == %@", id as CVarArg, user)
        
        do {
            if let deleteEmotionTrash = try context.fetch(fetchRequest).first {
                context.delete(deleteEmotionTrash)
                coreDataManager.saveContext()
            }
        } catch {
            print("Error deleting emotionTrash: \(error)")
        }
    }
    
    // delete: Ïú†Ï†ÄÏùò Í∞êÏ†ïÏì∞Î†àÍ∏∞ Ï†ÑÏ≤¥ ÏÇ≠Ï†ú
    func deleteTotalEmotionTrash(_ user: User) {
        let fetchRequest: NSFetchRequest<EmotionTrash> = EmotionTrash.fetchRequest()
        fetchRequest.predicate = NSPredicate(format: "user == %@", user)
        
        do {
            let emotionTrashes = try context.fetch(fetchRequest)
            for emotionTrash in emotionTrashes {
                context.delete(emotionTrash)
            }
            coreDataManager.saveContext()
        } catch {
            print("Error deleting all emotionTrashes: \(error)")
        }
    }
    
    // ÏûêÎèô ÌúòÎ∞ú Î°úÏßÅ
    func startAutoDeleteTask(_ day: Int) {
        print("""
              üì¢ [ÏûêÎèô ÏÇ≠Ï†ú ÏïåÎ¶º] \(day)Ïùº ÌõÑ ÏÇ≠Ï†ú ÏòàÏ†ï üì¢
              """)
        // Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Ïã§ÌñâÎê† Ìï®ÏàòÎ•º Ìò∏Ï∂úÌï† ÌÉÄÏù¥Î®∏ ÏÑ§Ï†ï -> withTimeInterval: * 60 * 60 * 24 Ï≤òÎ¶¨ÌïòÎ©¥ autoExpireDaysÏùº ÌõÑ Ïã§Ìñâ, repeats: trueÎ°ú Î≥ÄÍ≤Ω
        // (ÌÖåÏä§Ìä∏ ÏΩîÎìú) Double((SignInService.shared.signedInUser?.autoExpireDays ?? 7)) * 5, repeats: false
        Timer.scheduledTimer(withTimeInterval: Double(day) * 5, repeats: false) { _ in
            // ÏõêÌïòÎäî Ï£ºÍ∏∞(Ïòà: nÏùº Í∞ÑÍ≤©)Î°ú Ïã§ÌñâÎê† ÏΩîÎìú ÏûëÏÑ±
            
            
            // Ïù¥Í±¥ Ìè¨Í∑∏ÎùºÏö¥ÎìúÎ°ú Îì§Ïñ¥Ïò¨Îïå Ïã§ÌñâÎêòÎãàÍπå ! ÎÖ∏Ìã∞ Îî∞Î°ú ÏÇ≠Ï†úÎ°úÏßÅ Îî∞Î°ú ÌïòÎ©¥ ÎêòÍ≤†Îã§!!!
            print("Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Ïã§Ìñâ Ï§ë...")
            DispatchQueue.main.async {
                print("ÏÇ≠Ï†ú Î°úÏßÅ Ïã§Ìñâ")
                EmotionTrashService.shared.deleteTotalEmotionTrash(SignInService.shared.signedInUser!)
                NotificationCenter.default.post(name: NSNotification.Name("EmotionTrashUpdate"), object: nil)
                print("ÏÇ≠Ï†ú ÏôÑÎ£å")
                NotificationService.shared.autoDeleteNotification()
                print("ÏûêÎèô ÌúòÎ∞ú ÎÖ∏Ìã∞ ÏïåÎ¶º Î∞úÏÜ°")
            }
            
        }
    }
    
    // fetch: Ïú†Ï†ÄÏùò Ï†ÑÏ≤¥ Í∞êÏ†ïÏì∞Î†àÍ∏∞ Í∞ÄÏ†∏Ïò§Í∏∞
    func fetchTotalEmotionTrashes(_ user: User) -> [EmotionTrash] {
        let fetchRequest: NSFetchRequest<EmotionTrash> = EmotionTrash.fetchRequest()
        fetchRequest.predicate = NSPredicate(format: "user == %@", user)
        
        do {
            return try context.fetch(fetchRequest)
        } catch {
            print("Error fetching emotionTrashes: \(error)")
            return []
        }
    }
    
    // fetch: Î™®Îì† Ïú†Ï†ÄÏùò Ï†ÑÏ≤¥ Í∞êÏ†ïÏì∞Î†àÍ∏∞ Í∞ÄÏ†∏Ïò§Í∏∞
    func fetchAllUsersEmotionTrashes() -> [EmotionTrash] {
        let fetchRequest: NSFetchRequest<EmotionTrash> = EmotionTrash.fetchRequest()
        
        do {
            return try context.fetch(fetchRequest)
        } catch {
            print("Error fetching emotionTrashes: \(error)")
            return []
        }
    }
    
    // print: Ïú†Ï†ÄÏùò Ï†ÑÏ≤¥ Í∞êÏ†ïÏì∞Î†àÍ∏∞ Ï∂úÎ†•
    func printTotalEmotionTrashes(_ user: User) {
        let emotionTrashes = fetchTotalEmotionTrashes(user)
        for emotionTrash in emotionTrashes {
            print("EmotionTrashes -")
            print("""
            text: \(emotionTrash.text ?? "")
            timestamp: \(emotionTrash.timestamp ?? Date())
            """)
        }
    }
    
    // MARK: - ‚ö†Ô∏è Í¥ÄÎ¶¨ÏûêÏö©

    // delete: Î™®Îì† Ïú†Ï†ÄÏùò Í∞êÏ†ïÏì∞Î†àÍ∏∞ Ï†ÑÏ≤¥ ÏÇ≠Ï†ú
    func deleteAllUsersEmotionTrash() {
        let fetchRequest: NSFetchRequest<EmotionTrash> = EmotionTrash.fetchRequest()
        
        do {
            let emotionTrashes = try context.fetch(fetchRequest)
            for emotionTrash in emotionTrashes {
                context.delete(emotionTrash)
            }
            coreDataManager.saveContext()
        } catch {
            print("Error deleting all emotionTrashes: \(error)")
        }
    }
}
